// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: command.proto

/*
	Package pb is a generated protocol buffer package.

	It is generated from these files:
		command.proto
		dmmaster.proto
		dmworker.proto
		tracer.proto
		tracer_base.proto
		tracer_syncer.proto

	It has these top-level messages:
		Command
		MigrateWorkerRelayRequest
		UpdateWorkerRelayConfigRequest
		StartTaskRequest
		StartTaskResponse
		UpdateMasterConfigRequest
		UpdateMasterConfigResponse
		OperateTaskRequest
		OperateTaskResponse
		UpdateTaskRequest
		UpdateTaskResponse
		QueryStatusListRequest
		QueryStatusListResponse
		QueryErrorListRequest
		QueryErrorListResponse
		ShowDDLLocksRequest
		DDLLock
		ShowDDLLocksResponse
		UnlockDDLLockRequest
		UnlockDDLLockResponse
		BreakWorkerDDLLockRequest
		BreakWorkerDDLLockResponse
		SwitchWorkerRelayMasterRequest
		SwitchWorkerRelayMasterResponse
		OperateWorkerRelayRequest
		OperateWorkerRelayResponse
		RefreshWorkerTasksRequest
		RefreshWorkerTasksMsg
		RefreshWorkerTasksResponse
		HandleSQLsRequest
		HandleSQLsResponse
		PurgeWorkerRelayRequest
		PurgeWorkerRelayResponse
		CheckTaskRequest
		CheckTaskResponse
		StartSubTaskRequest
		UpdateRelayRequest
		MigrateRelayRequest
		OperateSubTaskRequest
		OperateSubTaskResponse
		QueryTaskOperationRequest
		QueryTaskOperationResponse
		UpdateSubTaskRequest
		QueryStatusRequest
		QueryErrorRequest
		HandleSubTaskSQLsRequest
		CommonWorkerResponse
		QueryStatusResponse
		QueryErrorResponse
		CheckStatus
		DumpStatus
		LoadStatus
		ShardingGroup
		SyncStatus
		RelayStatus
		SubTaskStatus
		SubTaskStatusList
		CheckError
		DumpError
		LoadError
		SyncSQLError
		SyncError
		RelayError
		SubTaskError
		SubTaskErrorList
		ProcessResult
		TError
		ProcessError
		DDLInfo
		DDLLockInfo
		ExecDDLRequest
		BreakDDLLockRequest
		SwitchRelayMasterRequest
		OperateRelayRequest
		OperateRelayResponse
		PurgeRelayRequest
		QueryWorkerConfigRequest
		QueryWorkerConfigResponse
		TaskMeta
		TaskLog
		GetTSORequest
		GetTSOResponse
		CommonUploadResponse
		UploadSyncerBinlogEventRequest
		UploadSyncerJobEventRequest
		BaseEvent
		MySQLPosition
		SyncerState
		ExecDDLInfo
		SyncerBinlogEvent
		SyncerJobEvent
*/
package pb

import (
	"fmt"

	proto "github.com/gogo/protobuf/proto"

	math "math"

	_ "google.golang.org/genproto/googleapis/api/annotations"

	io "io"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type CommandType int32

const (
	CommandType_MigrateWorkerRelay      CommandType = 0
	CommandType_UpdateWorkerRelayConfig CommandType = 1
	CommandType_StartTask               CommandType = 2
	CommandType_UpdateMasterConfig      CommandType = 3
	CommandType_OperateTask             CommandType = 4
	CommandType_UpdateTask              CommandType = 5
	CommandType_QueryStatus             CommandType = 6
	CommandType_QueryError              CommandType = 7
	CommandType_ShowDDLLocks            CommandType = 8
	CommandType_UnlockDDLLock           CommandType = 9
	CommandType_BreakWorkerDDLLock      CommandType = 10
	CommandType_SwitchWorkerRelayMaster CommandType = 11
	CommandType_OperateWorkerRelay      CommandType = 12
	CommandType_RefreshWorkerTasks      CommandType = 13
	CommandType_HandleSQLs              CommandType = 14
	CommandType_PurgeWorkerRelay        CommandType = 15
	CommandType_CheckTask               CommandType = 16
)

var CommandType_name = map[int32]string{
	0:  "MigrateWorkerRelay",
	1:  "UpdateWorkerRelayConfig",
	2:  "StartTask",
	3:  "UpdateMasterConfig",
	4:  "OperateTask",
	5:  "UpdateTask",
	6:  "QueryStatus",
	7:  "QueryError",
	8:  "ShowDDLLocks",
	9:  "UnlockDDLLock",
	10: "BreakWorkerDDLLock",
	11: "SwitchWorkerRelayMaster",
	12: "OperateWorkerRelay",
	13: "RefreshWorkerTasks",
	14: "HandleSQLs",
	15: "PurgeWorkerRelay",
	16: "CheckTask",
}
var CommandType_value = map[string]int32{
	"MigrateWorkerRelay":      0,
	"UpdateWorkerRelayConfig": 1,
	"StartTask":               2,
	"UpdateMasterConfig":      3,
	"OperateTask":             4,
	"UpdateTask":              5,
	"QueryStatus":             6,
	"QueryError":              7,
	"ShowDDLLocks":            8,
	"UnlockDDLLock":           9,
	"BreakWorkerDDLLock":      10,
	"SwitchWorkerRelayMaster": 11,
	"OperateWorkerRelay":      12,
	"RefreshWorkerTasks":      13,
	"HandleSQLs":              14,
	"PurgeWorkerRelay":        15,
	"CheckTask":               16,
}

func (x CommandType) String() string {
	return proto.EnumName(CommandType_name, int32(x))
}
func (CommandType) EnumDescriptor() ([]byte, []int) { return fileDescriptorCommand, []int{0} }

type Command struct {
	Tp       CommandType `protobuf:"varint,1,opt,name=tp,proto3,enum=pb.CommandType" json:"tp,omitempty"`
	Request  []byte      `protobuf:"bytes,2,opt,name=request,proto3" json:"request,omitempty"`
	Response []byte      `protobuf:"bytes,3,opt,name=response,proto3" json:"response,omitempty"`
	Err      string      `protobuf:"bytes,4,opt,name=err,proto3" json:"err,omitempty"`
}

func (m *Command) Reset()                    { *m = Command{} }
func (m *Command) String() string            { return proto.CompactTextString(m) }
func (*Command) ProtoMessage()               {}
func (*Command) Descriptor() ([]byte, []int) { return fileDescriptorCommand, []int{0} }

func (m *Command) GetTp() CommandType {
	if m != nil {
		return m.Tp
	}
	return CommandType_MigrateWorkerRelay
}

func (m *Command) GetRequest() []byte {
	if m != nil {
		return m.Request
	}
	return nil
}

func (m *Command) GetResponse() []byte {
	if m != nil {
		return m.Response
	}
	return nil
}

func (m *Command) GetErr() string {
	if m != nil {
		return m.Err
	}
	return ""
}

func init() {
	proto.RegisterType((*Command)(nil), "pb.Command")
	proto.RegisterEnum("pb.CommandType", CommandType_name, CommandType_value)
}
func (m *Command) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Command) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Tp != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCommand(dAtA, i, uint64(m.Tp))
	}
	if len(m.Request) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintCommand(dAtA, i, uint64(len(m.Request)))
		i += copy(dAtA[i:], m.Request)
	}
	if len(m.Response) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintCommand(dAtA, i, uint64(len(m.Response)))
		i += copy(dAtA[i:], m.Response)
	}
	if len(m.Err) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintCommand(dAtA, i, uint64(len(m.Err)))
		i += copy(dAtA[i:], m.Err)
	}
	return i, nil
}

func encodeVarintCommand(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *Command) Size() (n int) {
	var l int
	_ = l
	if m.Tp != 0 {
		n += 1 + sovCommand(uint64(m.Tp))
	}
	l = len(m.Request)
	if l > 0 {
		n += 1 + l + sovCommand(uint64(l))
	}
	l = len(m.Response)
	if l > 0 {
		n += 1 + l + sovCommand(uint64(l))
	}
	l = len(m.Err)
	if l > 0 {
		n += 1 + l + sovCommand(uint64(l))
	}
	return n
}

func sovCommand(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozCommand(x uint64) (n int) {
	return sovCommand(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Command) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommand
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Command: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Command: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tp", wireType)
			}
			m.Tp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommand
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Tp |= (CommandType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Request", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommand
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCommand
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Request = append(m.Request[:0], dAtA[iNdEx:postIndex]...)
			if m.Request == nil {
				m.Request = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Response", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommand
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCommand
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Response = append(m.Response[:0], dAtA[iNdEx:postIndex]...)
			if m.Response == nil {
				m.Response = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Err", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommand
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommand
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Err = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommand(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommand
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCommand(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCommand
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCommand
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCommand
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthCommand
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowCommand
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipCommand(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthCommand = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCommand   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("command.proto", fileDescriptorCommand) }

var fileDescriptorCommand = []byte{
	// 392 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x54, 0x91, 0xc1, 0x6e, 0xd3, 0x40,
	0x10, 0x86, 0xbb, 0x4e, 0x69, 0x9a, 0x49, 0x9c, 0x2c, 0x2b, 0x04, 0x56, 0x41, 0x26, 0xe2, 0x14,
	0x71, 0x48, 0x25, 0x78, 0x83, 0xa6, 0x48, 0x1c, 0x52, 0x41, 0xed, 0x56, 0x9c, 0x37, 0xce, 0xd4,
	0xb1, 0xec, 0xee, 0x2e, 0xb3, 0x6b, 0x55, 0x79, 0x0b, 0x1e, 0x8b, 0x23, 0x8f, 0x80, 0xc2, 0x8d,
	0xa7, 0x40, 0x6b, 0x3b, 0x28, 0xb9, 0x79, 0xfe, 0xf9, 0xfe, 0xf1, 0xff, 0xdb, 0x10, 0x66, 0xfa,
	0xf1, 0x51, 0xaa, 0xf5, 0xdc, 0x90, 0x76, 0x5a, 0x04, 0x66, 0x75, 0xf1, 0x26, 0xd7, 0x3a, 0xaf,
	0xf0, 0x52, 0x9a, 0xe2, 0x52, 0x2a, 0xa5, 0x9d, 0x74, 0x85, 0x56, 0xb6, 0x25, 0xde, 0x11, 0xf4,
	0x17, 0xad, 0x45, 0xbc, 0x85, 0xc0, 0x99, 0x88, 0x4d, 0xd9, 0x6c, 0xfc, 0x61, 0x32, 0x37, 0xab,
	0x79, 0xb7, 0xb8, 0xdb, 0x1a, 0x4c, 0x02, 0x67, 0x44, 0x04, 0x7d, 0xc2, 0xef, 0x35, 0x5a, 0x17,
	0x05, 0x53, 0x36, 0x1b, 0x25, 0xfb, 0x51, 0x5c, 0xc0, 0x39, 0xa1, 0x35, 0x5a, 0x59, 0x8c, 0x7a,
	0xcd, 0xea, 0xff, 0x2c, 0x38, 0xf4, 0x90, 0x28, 0x3a, 0x9d, 0xb2, 0xd9, 0x20, 0xf1, 0x8f, 0xef,
	0xff, 0x06, 0x30, 0x3c, 0xb8, 0x2d, 0x5e, 0x82, 0xb8, 0x29, 0x72, 0x92, 0x0e, 0xbf, 0x69, 0x2a,
	0x91, 0x12, 0xac, 0xe4, 0x96, 0x9f, 0x88, 0xd7, 0xf0, 0xea, 0xde, 0xac, 0x8f, 0xe5, 0x85, 0x56,
	0x0f, 0x45, 0xce, 0x99, 0x08, 0x61, 0x90, 0x3a, 0x49, 0xee, 0x4e, 0xda, 0x92, 0x07, 0xfe, 0x46,
	0xcb, 0xde, 0x48, 0xeb, 0x90, 0x3a, 0xac, 0x27, 0x26, 0x30, 0xfc, 0x62, 0xd0, 0xdf, 0x6e, 0xc0,
	0x53, 0x31, 0x06, 0x68, 0xc1, 0x66, 0x7e, 0xe6, 0x81, 0xdb, 0x1a, 0x69, 0x9b, 0x3a, 0xe9, 0x6a,
	0xcb, 0xcf, 0x3c, 0xd0, 0x08, 0x9f, 0x88, 0x34, 0xf1, 0xbe, 0xe0, 0x30, 0x4a, 0x37, 0xfa, 0xe9,
	0xfa, 0x7a, 0xb9, 0xd4, 0x59, 0x69, 0xf9, 0xb9, 0x78, 0x0e, 0xe1, 0xbd, 0xaa, 0x74, 0x56, 0x76,
	0x1a, 0x1f, 0xf8, 0xd7, 0x5f, 0x11, 0xca, 0xb2, 0x4d, 0xba, 0xd7, 0xc1, 0x57, 0x48, 0x9f, 0x0a,
	0x97, 0x6d, 0x0e, 0x2a, 0xb4, 0x09, 0xf9, 0xd0, 0x9b, 0xba, 0x6c, 0x87, 0xbd, 0x47, 0x5e, 0x4f,
	0xf0, 0x81, 0xd0, 0x76, 0x2e, 0x9f, 0xd4, 0xf2, 0xd0, 0x27, 0xfb, 0x2c, 0xd5, 0xba, 0xc2, 0xf4,
	0x76, 0x69, 0xf9, 0x58, 0xbc, 0x00, 0xfe, 0xb5, 0xa6, 0xfc, 0xc8, 0x3d, 0xf1, 0x1f, 0x66, 0xb1,
	0xc1, 0xac, 0x6c, 0xfa, 0xf1, 0x2b, 0xfe, 0x73, 0x17, 0xb3, 0x5f, 0xbb, 0x98, 0xfd, 0xde, 0xc5,
	0xec, 0xc7, 0x9f, 0xf8, 0x64, 0x75, 0xd6, 0xfc, 0xf9, 0x8f, 0xff, 0x02, 0x00, 0x00, 0xff, 0xff,
	0xb5, 0xd2, 0xb9, 0x07, 0x2c, 0x02, 0x00, 0x00,
}
